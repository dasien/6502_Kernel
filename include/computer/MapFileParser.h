/**
 * @file MapFileParser.h
 * @brief Kernel MAP File Parser for ROM Segment Loading
 * @author 6502 Kernel Project
 */

#pragma once

#include <string>
#include <vector>
#include <cstdint>

/**
 * @struct SegmentInfo
 * @brief Information about a memory segment from MAP file
 *
 * Contains details about a memory segment parsed from the linker MAP file,
 * including its name, memory address range, and size. Used to load
 * kernel ROM segments into the correct memory locations.
 */
struct SegmentInfo
{
    std::string name;   ///< Segment name (e.g., "CODE", "JUMPS", "VECS")
    uint16_t start;     ///< Starting memory address of the segment
    uint16_t end;       ///< Ending memory address of the segment
    size_t size;        ///< Size of the segment in bytes

    /**
     * @brief Default constructor
     *
     * Initializes all numeric fields to zero and name to empty string.
     */
    SegmentInfo() : start(0), end(0), size(0)
    {
    }
};

/**
 * @class MapFileParser
 * @brief Parser for kernel.map files generated by the ca65/ld65 toolchain
 *
 * This class parses MAP files generated by the ca65 assembler and ld65 linker
 * to extract memory segment information. The MAP file contains the layout of
 * the compiled kernel ROM, specifying where each segment should be loaded
 * in memory.
 *
 * Features:
 * - Parses ca65/ld65 MAP file format
 * - Extracts segment names, addresses, and sizes
 * - Finds specific segments by name (CODE, JUMPS, VECS)
 * - Provides segment information for ROM loading
 *
 * The parser handles MAP files with segment entries like:
 * ```
 * CODE                  00F000  00FD3C  000D3D  00001
 * JUMPS                 00FF00  00FF11  000012  00001
 * VECS                  00FFFA  00FFFF  000006  00001
 * ```
 *
 * @see Computer6502, Memory
 */
class MapFileParser
{
public:
    /**
     * @brief Parse a MAP file and extract segment information
     * @param mapFile Path to the kernel.map file to parse
     * @return std::vector<SegmentInfo> Vector containing all parsed segments
     * @throws std::runtime_error if MAP file cannot be opened or parsed
     *
     * Reads and parses a ca65/ld65 generated MAP file to extract memory
     * segment information. The segments are used to properly load the
     * kernel ROM into memory at the correct addresses.
     */
    std::vector<SegmentInfo> parseMapFile(const std::string &mapFile);

    /**
     * @brief Find a specific segment by name in the segment list
     * @param segments Vector of segments to search through
     * @param name Name of the segment to find (e.g., "CODE", "JUMPS", "VECS")
     * @return SegmentInfo* Pointer to the segment if found, nullptr if not found
     *
     * Searches for a named segment in the provided segment vector.
     * Commonly used to find the CODE, JUMPS, and VECS segments needed
     * for kernel ROM loading.
     */
    SegmentInfo *findSegment(std::vector<SegmentInfo> &segments, const std::string &name);

private:
    /**
     * @brief Parse a single segment line from the MAP file
     * @param line Line of text from the MAP file containing segment info
     * @return SegmentInfo Parsed segment information
     *
     * Parses lines with format:
     * "SEGMENT_NAME    START_ADDR  END_ADDR  SIZE  ALIGN"
     */
    SegmentInfo parseSegmentLine(const std::string &line);
};
